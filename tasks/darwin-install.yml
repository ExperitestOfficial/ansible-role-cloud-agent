
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - app_name
  - clear_temp_folder
  - service_name
  - main_class
  - installation_folder
  - clear_before_install
  - server_port
  - jmx_port
  - service_plist_file_path
  - installer_file_name
  - ansible_user_id
  - s3_download_url
  - launcher_file_name
  - application_properties
  - extra_java_options
#  - installer_checksum


# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# required java dependency

- name: make sure java is installed on the machine
  command: "{{ java_bin }} -version"
  register: java_test
  become: yes
  ignore_errors: yes
  
- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# download the file

- name: validate checksum and download zip from s3 url
  get_url:
    url: "{{ s3_download_url }}"
  #  checksum: "sha256: {{ installer_checksum }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url == ""

- name: validate checksum and download zip from custom url
  get_url:
    url: "{{ custom_download_url }}"
  #  checksum: "sha256: {{ installer_checksum }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url != ""

# stop old service

- name: stop the old service
  command: "launchctl unload {{ service_plist_file_path }}"
  become: yes

- name: kill adb processes
  shell: |
    killall adb
  register: killadbresults
  changed_when: killadbresults.rc == 0
  failed_when: killadbresults.rc != 0 and killadbresults.rc != 1
  become: yes

- name: Get running jmx processes
  shell: "ps -ef | grep -v grep | grep {{ jmx_port }} | awk '{print $2}'"
  register: running_processes
  become: yes

- name: Kill running jmx processes
  shell: "kill -9 {{ item }}"
  with_items: "{{ running_processes.stdout_lines }}"
  become: yes
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True
  notify:
    - start the service

# unpack and copy all the files to the installation folder

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure unzip folder exist
  file:
    path: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# REMOVEME ugly hack - remove the sub folder in zip file
- name: unzip the file
  unarchive:
    src: "{{ temp_folder }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}"
    owner: "{{ ansible_user_id }}"
  become: yes

- name: copy the file to installation folder
  command: "cp -r {{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}/ {{ installation_folder }}/"
  become: yes
  notify:
    - start the service

- name: copy plist
  template:
    src: service.plist.j2
    dest: "{{ service_plist_file_path }}"
    # in mac - plist owner is root
    owner: root
  become: yes

- name: copy start script
  template:
    src: start.sh.j2
    dest: "{{ installation_folder }}/{{ launcher_file_name }}"
    mode: 0755
    owner: "{{ ansible_user_id }}"
  become: yes

# configure installed 

- name: update application properties file
  lineinfile:
    path: "{{ installation_folder }}/conf/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update xml conf
  lineinfile:
    state: present
    path: "{{ installation_folder }}/conf/cloudagent.conf.xml"
    line: "<{{ item.key }}>{{ item.value }}</{{ item.key }}>"
    regexp: "<{{ item.key }}>.*<\\/{{ item.key }}>"
    insertbefore:  "<\\/forwarder-configuration>"
  with_dict: "{{ xml_conf }}"
  become: yes

- name: update log4j properties file
  lineinfile:
    path: "{{ installation_folder }}/conf/grid-log4j.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ log4j_properties }}"
  become: yes

- name: update logback properties file
  lineinfile:
    path: "{{ installation_folder }}/conf/logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: set permissions for logs folder
  file:
    path: "{{ installation_folder }}/logs"
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

- name: reset pairing key
  file:
    path: "{{ installation_folder }}/conf/pairing.conf.xml"
    state: absent
  become: yes

# remove vmoptions file

- name: check vmoptions files to remove
  find:
    paths: "{{ installation_folder }}"
    file_type: file
    patterns: "*.vmoptions"
  register: delete_vmoptions
  become: yes

- name: remove vmoptions files from installation folder
  file:
    path: "{{ item.path }}"
    state: absent
  become: yes
  with_items:
    - "{{ delete_vmoptions.files }}"

# set permission to zipalign file

- name: check the zipalign file exists
  stat:
    path: "{{ installation_folder }}/bin/adb/js/darwin/zipalign"
  register: zipalign_exists

- name: set permissions to zipalign file
  file:
    path: "{{ installation_folder }}/bin/adb/js/darwin/zipalign"
    state: file
    mode: 0777
  become: yes
  when: zipalign_exists.stat.exists
  
# install cambrionix package

- name: check if cambrionix api is installed on the machine
  command: "/usr/local/sbin/cbrxd --version"
  register: cbrxd_test
  become: yes
  ignore_errors: yes
  
- name: search cambrionix package
  find:
    paths: "{{ installation_folder }}/bin/cambrionix"
    patterns: '*.pkg'
  register: cmbx_installer

- name: verify cambrionix version if installed
  block:

    - name: split the cbrxd_test
      set_fact:
        cbrx_versplit: "{{ cbrxd_test.stdout_lines[0].split(' ') }}"

      # temp logic as dot is missing in filename
    - name: split the cbrx_versplit major version
      set_fact:
        cbrx_majorver: "{{ cbrx_versplit[1].split('.') }}"

    - name: get the converted installed cambrionix version
      set_fact:
        cbrx_inst_ver: "{{ cbrx_majorver[0] }}.{{ cbrx_majorver[1] }}{{ cbrx_majorver[2] }}b{{ cbrx_versplit[3] }}"
    
    - name: get the cambrionix installer file version
      set_fact:
        cbrx_file_ver: "{{ (cmbx_installer.files[0].path | basename | splitext)[0].split('_')[1] }}"

    - name: print cambrionix currently installed and installer file version
      debug:
        msg: "Installed Version: {{cbrx_inst_ver}} and Installer File Verison: {{cbrx_file_ver}} is same."
      when: cbrx_inst_ver == cbrx_file_ver
    
    - name: print if cambrionix version is mismatched
      fail:
        msg: "[Warning]: Installed Version: {{cbrx_inst_ver}} and Installer File Verison: {{cbrx_file_ver}} is different. Installing from file version now..."
      ignore_errors: yes
      when: cbrx_inst_ver != cbrx_file_ver

    - name: reset the cbrxd status to 1 if cambrionix has different version than installer file
      set_fact:
        cbrxd_test:
          rc: 1
      when: cbrx_inst_ver != cbrx_file_ver

  when: cbrxd_test.rc == 0


- name: install cambrionix
  block:
    
    - name: start the installation for cambrionix tools
      shell: "/usr/sbin/installer -allowUntrusted -verboseR -dumplog -pkg {{ cmbx_installer.files[0].path }} -target /"
      args:
        executable: /bin/bash
      async: 300
      poll: 0
      register: installer_cbrxd
      become: yes
      ignore_errors: yes
    
    - name: wait for installer cambrionix
      async_status:
        jid: "{{ installer_cbrxd.ansible_job_id }}"
      register: wait_for_installer_cbrxd
      until: wait_for_installer_cbrxd.finished
      retries: 30
      delay: 10
      become: yes
      ignore_errors: yes

  when: cbrxd_test.rc != 0

# fixed xcode select

- name: Fix xcode select
  shell: xcode-select -s /Applications/Xcode.app/Contents/Developer/
  become: yes
  ignore_errors: yes

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      jmx_port: "{{ jmx_port }}"
      installation_folder: "{{ installation_folder }}"
      configuration_file: "{{ installation_folder }}/conf/application.properties"
      configuration_xml_file: "{{ installation_folder }}/conf/cloudagent.conf.xml"
      service_plist_file_path: "{{ service_plist_file_path }}"
